<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     @author Cristian Spiescu                                                                
     ====================================================================== -->
<project name="project" default="default" basedir="..">
	
	<property name="arduinoDir" value="D:/Arduino_IDEs/"/>
	<property name="testSuite" value="org.flowerplatform.rapp_manager.arduino_ide.test.TestSuiteArduinoIde"/>
	
	<description>
            description
    </description>

	<!-- ================================= 
          target: default              
         ================================= -->
	<target name="default" description="Add the class files to jar, and copies it to the Arduino tools folder.">
		<loadfile property="version" srcfile="src/flowerino-plugin-version.txt"></loadfile>
		<jar destfile="build/FlowerPlatformPlugin.jar" basedir="bin">
			<fileset dir="../../tiny-http-server/tiny-http-server/bin" />
			<manifest>
				<attribute name="Implementation-Version" value="${version}"/>
			</manifest>
		</jar>
		<copy file="build/FlowerPlatformPlugin.jar" todir="${user.home}/Documents/Arduino/tools/FlowerPlatformPlugin/tool">
		</copy>
	</target>

	<target name="clean">
		<delete>
			<fileset dir="build" includes="**/*"/>
		</delete>
	</target>
				
	<target name="zip" description="Builds and creates a ZIP that contains the right dir structure to use when unzipping in ARDUINO_SKETCHBOOK_DIR/tools" depends="default">
		<zip destfile="build/FlowerPlatformPlugin_v${version}.zip">
			<zipfileset dir="build" includes="FlowerPlatformPlugin.jar" prefix="FlowerPlatformPlugin/tool"/>
			<zipfileset dir="lib" includes="*" prefix="FlowerPlatformPlugin/tool"/>
		</zip>
	</target>

	<macrodef name="runTest">
    	<attribute name="arduino-dir"/>
        <attribute name="test-suite"/>
        <sequential>
        	<junit printsummary="yes" haltonfailure="yes" fork="true" jvm="@{arduino-dir}/java/bin/javaw.exe">
        				
				<jvmarg value="-Dsun.java2d.d3d=false"/>
				<jvmarg value="-Xms128M"/>
				<jvmarg value="-Xmx512M"/>
				
				<jvmarg value="-DAPP_DIR=&quot;@{arduino-dir}&quot;"/>
				
				<!-- Dependencies needed for running tests -->
				<classpath>
					<pathelement location="test_deps/junit-4.12.jar"/>
					<pathelement location="test_deps/hamcrest-core-1.3.jar"/>
					<pathelement location="test_deps/junit-toolbox-2.2.jar"/>
					<pathelement location="test_deps/commons-io-2.4.jar"/>
					<pathelement location="test/resources/"/>
				</classpath>
				
				<!-- The regular, and test classes from the current project (i.e. flower-platform-rapp-manager-tests) -->
				<classpath location="target/classes"/>

        		<!-- The link with the flower-platform-rapp-manager project -->
				<classpath location="../flower-platform-rapp-manager/target/classes" />
        		
        		<!-- The link with the flower-platform-rapp-manager-arduino-ide project -->
				<classpath location="../flower-platform-rapp-manager-arduino-ide/target/classes" />
        		
				<!-- The link with the tiny-http-server project -->
				<classpath location="../../tiny-http-server/tiny-http-server/bin" />
        		
				<!-- The Arduino IDE jars, needed for actually launching Arduino IDE. -->
				<classpath>
					<fileset dir="@{arduino-dir}/lib">
						<include name="**/*.jar" />
					</fileset>
				</classpath>
				
				<test name="@{test-suite}" haltonfailure="no" outfile="result">
					<formatter type="xml" usefile="false"/>
				</test>
			</junit>
        </sequential>
	</macrodef>
	
	<target name="runTests"> 
		<property name="arduinoDir" value="D:/Arduino_IDEs/"/>
		<script language="javascript"> <![CDATA[
		 	try {
		 		// in jre 8, importClass is not available any more, because the script engine was changed (from Rhino -> Nashorn)
		 		// in jre 8, importing files is done with: var System = Java.type('java.lang.System');
		 		// however this doesn't worn in jre7, where the mechanism is: importClass(java.lang.System);
		 		// so, including the file below, defines, even in jre8, importClass (and maybe others?)
		 		load("nashorn:mozilla_compat.js");
		 	} catch (e) {
		 		// will throw if run in jre 7; ignore
		 	}
			importClass(java.io.File);
			
		    ds = project.createDataType("dirset");
		    ds.setDir( new File( project.getProperty("arduinoDir") ) );
		    ds.setIncludes( "/*/" );
		 	ds.setExcludes( "/*/*/" );

		    // iterate over directories found.
		    srcFiles = ds.getDirectoryScanner( project ).getIncludedDirectories( );
		    for ( i = 0; i < srcFiles.length; i++ ) {
				var macro = project.createTask( "runTest" );
			    macro.setDynamicAttribute( "arduino-dir", project.getProperty("arduinoDir") + srcFiles[i] );
				macro.setDynamicAttribute( "test-suite", project.getProperty("testSuite") );
			    macro.execute();
		    }
			]]> </script>
	</target>
</project>
